
# Celery Upstart script

description "Celery beat"

# Wait for Upstart to launch the mongod process.
# HOWEVER, mongod probably isn't ready to accept connections yet!
# See the pre-start section for a workaround.
start on runlevel [2345]
stop on runlevel [06]

setuid radek
setgid radek
chdir /home/radek/phantom-watch
# Wait longer than the default 5 seconds for celeryd to exit gracefully.
# Mongo gets 300 seconds, so perhaps this number should be higher. Then again,
# Mongo doesn't have to restart each time new code is deployed.
kill timeout 60

# Respawn the job up to 10 times in a 5 second period (default respawn limit).
respawn

# pre-start script
#     # Wait until mongod is ready to accept connections.
#     # It'd be nice if mongod itself did this in a post-start script, a la
#     # http://upstart.ubuntu.com/wiki/JobScripts.
#     MAX_ATTEMPTS=5
#     i=1
#     while ! netstat -tan | grep '127\.0\.0\.1:27017.*LISTEN' > /dev/null
#     do
#         if [ $i -ge $MAX_ATTEMPTS ]; then break; fi
#         sleep 1;
#         i=$(expr $i + 1)
#     done
# end script

script
    # Prepare the environment.
    . /home/radek/phantom-watch/env/bin/activate
    # We need Upstart to monitor the celeryd process, not shell process
    # executing this script. For example, if celeryd were to ignore SIGTERM,
    # this shell would nevertheless dutifully exit, and Upstart would believe
    # that the whole service had stopped gracefully. This could lead to rogue
    # celery workers running obsolete code.
    # To avoid confusing Upstart, we invoke celeryd with the shell's exec
    # command, and "the shell process is replaced with the specified program,"
    # according to man dash. --jnm 20141212
    exec /home/radek/phantom-watch/env/bin/python -m celery -A phantom_watch beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
end script